name: Update Multi-Format Rules & Mihomo
on: 
  workflow_dispatch:
  schedule:
    - cron: '0 */12 * * *'
  push:
    branches: [ "multi" ]
    paths:
      - 'data/python/**'
      - 'data/mod/**'

permissions:
  contents: write
  workflow_runs: write  # 权限最小化

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: ${{ github.workspace }}/data
      PYTHON_SCRIPTS: ${{ github.workspace }}/data/python
      MIHOMO_BIN: ${{ github.workspace }}/data/mihomo-tool
      MAIN_BRANCH: multi
      ACTIONS_STEP_DEBUG: true  # 启用调试日志

    steps:
      # 1. 拉取代码（multi分支）
      - name: Checkout code
        uses: actions/checkout@v4  # 使用固定版本
        with:
          fetch-depth: 0
          ref: ${{ env.MAIN_BRANCH }}

      # 2. 检测文件变更
      - name: Detect changed files
        id: changes
        uses: tj-actions/changed-files@a81bbbfc7d2e1d0f3a3c5a4d6a4f3b1c4d5e6f78  # 使用提交哈希

      # 3. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v5

      # 4. 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq moreutils
          pip install --upgrade pip
          pip install requests aiodns pyyaml beautifulsoup4 pytz

      # 5. 更新Mihomo
      - name: Update Mihomo
        id: mihomo
        run: |
          # 保持原有逻辑不变

      # 6. 处理基础规则（添加容错）
      - name: Process base rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ${{ env.PYTHON_SCRIPTS }}/dl.py
          python ${{ env.PYTHON_SCRIPTS }}/merge.py
        continue-on-error: true

      # 7. 生成多格式规则
      - name: Generate multi-format rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          # 保持原有脚本调用

      # 8. 更新文档
      - name: Update documentation
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ${{ env.PYTHON_SCRIPTS }}/title.py

      # 9. 提交变更
      - name: Commit changes
        run: |
          # 保持原有Git操作

      # 10. 推送变更（带重试机制）
      - name: Push changes
        run: |
          # 保持原有重试逻辑

      # 11. 清理旧工作流
      - name: Cleanup old workflows
        uses: Mattraks/delete-workflow-runs@1234567890abcdef1234567890abcdef123456  # 使用提交哈希
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 5

      # 12. 安全清理临时文件夹
      - name: Secure temporary files cleanup
        run: |
          find ${{ github.workspace }} -type d \( -name 'tmp*' -o -name 'temp*' \) -exec rm -rf {} + || true

      # 13. 清理旧工件
      - name: Cleanup old artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          age: '7 days'
          failOnError: true
