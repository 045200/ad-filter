name: Update Multi Rules with SmartDNS
on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  push:
    branches: [ "multi" ]
    paths:
      - 'data/mod/**'
      - 'data/rules.txt'

permissions:
  contents: write
  actions: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: ${{ github.workspace }}/data
      PYTHON_SCRIPTS: ${{ github.workspace }}/data/python
      MIHOMO_BIN: ${{ github.workspace }}/data/mihomo-tool
      MAIN_BRANCH: multi
      CACHE_DIR: ${{ github.workspace }}/data/cache
      TEMP_DIR: ${{ github.workspace }}/tmp
      SMARTDNS_PORT: 5354  # 使用5354端口避免冲突
      SMARTDNS_RULE_SOURCES: ${{ github.workspace }}/data/smartdns_sources.txt

    steps:
      # 1. 拉取代码（multi分支）- 核心步骤
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.MAIN_BRANCH }}

      # 2. 设置Python环境- 核心步骤
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. 缓存Python依赖- 核心步骤（加速依赖安装）
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. 安装系统依赖- 核心步骤（提供jq/dnsutils等工具）
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq moreutils dnsutils net-tools

      # 5. 安装Python依赖- 核心步骤（规则处理脚本依赖）
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install aiohttp aiodns psutil xxhash maxminddb pyyaml requests chardet adblockparser IPy pytz pybloom-live aiofiles idna
      
      - name: Run 脚本依赖检查
        run: |
          echo "开始检查依赖..."
          python ${{ env.PYTHON_SCRIPTS }}/filter_cleaner.py
          echo "依赖检查完成"
      
      # 10. 并行下载规则- 核心步骤
      - name: Download rules in parallel
        run: |
          echo "开始并行下载规则..."
          python ${{ env.PYTHON_SCRIPTS }}/dl.py &
          python ${{ env.PYTHON_SCRIPts }}/dl_smartdns.py &
          wait
          echo "规则下载完成"

      # 11. 运行merge.py（广告规则合并去重）- 核心步骤
      - name: Run merge.py
        run: |
          echo "开始合并广告规则..."
          python ${{ env.PYTHON_SCRIPTS }}/merge.py
          echo "广告规则合并完成"

      # 12. 清理临时生成的adblock和allow文件- 核心步骤
      - name: Cleanup temporary filter files
        run: |
          cd ${{ env.DATA_DIR }}/filter
          echo "清理临时文件..."
          for file in adblock*.txt; do
            if [ "$file" != "adblock_filter.txt" ] && [ "$file" != "adblock.txt" ]; then
              rm -f "$file"
            fi
          done
          for file in allow*.txt; do
            if [ "$file" != "allow_filter.txt" ] && [ "$file" != "allow.txt" ]; then
              rm -f "$file"
            fi
          done
          echo "临时文件清理完成"

      
      # 14. 并行生成多格式规则- 核心步骤
      - name: Generate multi-format rules in parallel
        run: |
          echo "开始生成多格式规则..."
          python ${{ env.PYTHON_SCRIPTS }}/filter_adg.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_adh.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_adp.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_pihole.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_hosts.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_ubo.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_clash.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_mihomo.py &
          python ${{ env.PYTHON_SCRIPTS }}/filter_smartdns.py &
          wait
          echo "多格式规则生成完成"

      # 15. 更新文档- 核心步骤
      - name: Update documentation
        run: |
          echo "更新文档..."
          python ${{ env.PYTHON_SCRIPTS }}/title.py
          python ${{ env.PYTHON_SCRIPTS }}/readme.py
          echo "文档更新完成"

      # 16. 统一清理步骤- 修正：备份目录路径与步骤6一致
      - name: Unified cleanup process
        run: |
          echo "开始统一清理..."
          # 清理备份文件（路径修正为mod/backups")
          BACKUP_DIR="${{ env.DATA_DIR }}/mod/backups"
          if [ -d "$BACKUP_DIR" ]; then
            echo "清理备份文件..."
            for type in adblock allow; do
              files=$(find "$BACKUP_DIR" -type f -name "${type}_filter_backup_*.txt" -printf '%T@ %p\n' | sort -nr)
              if [ -n "$files" ]; then
                count=$(echo "$files" | wc -l)
                if [ $count -gt 1 ]; then
                  echo "$files" | tail -n +2 | cut -d' ' -f2- | xargs -r rm -f
                  echo "删除 $((count-1)) 个旧备份文件"
                fi
              fi
            done
          fi
          
          # 清理临时目录
          rm -rf ${{ env.TEMP_DIR }}
          echo "统一清理完成"

      # 17. 提交变更- 核心步骤
      - name: Commit changes
        id: commit
        run: |
          echo "准备提交变更..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git add --all
          
          if git diff --staged --quiet; then
            echo "无变更需提交"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            # 即使没有变更也创建一个标记文件，以便下次缓存命中
            touch ${{ github.workspace }}/.smartdns-cache-marker
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git commit -m "SmartDNS规则更新: [$(date +'%Y-%m-%d %H:%M:%S') UTC+8]"
            # 创建缓存标记文件
            touch ${{ github.workspace }}/.smartdns-cache-marker
          fi

      # 18. 推送变更- 优化：先判断远程差异，避免无意义merge
      - name: Push changes
        if: steps.commit.outputs.has_changes == 'true'
        run: |
          echo "开始推送变更..."
          git fetch origin ${{ env.MAIN_BRANCH }}
          
          # 仅当本地与远程有差异时才merge
          if ! git diff --quiet HEAD origin/${{ env.MAIN_BRANCH }}; then
            git merge origin/${{ env.MAIN_BRANCH }} --no-edit
            
            # 处理冲突（自动接受本地版本）
            if git diff --name-only --diff-filter=U | grep -q .; then
              echo "检测到冲突，自动解决..."
              git checkout --ours -- $(git diff --name-only --diff-filter=U)
              git add -u
              git commit -m "自动解决合并冲突"
            fi
          fi
          
          # 3次重试推送
          for i in {1..3}; do
            if git push origin ${{ env.MAIN_BRANCH }}; then
              echo "推送成功"
              break
            else
              echo "推送尝试 $i 失败，5秒后重试..."
              sleep 5
              git fetch origin ${{ env.MAIN_BRANCH }}
              ! git diff --quiet HEAD origin/${{ env.MAIN_BRANCH }} && git merge origin/${{ env.MAIN_BRANCH }} --no-edit
            fi
          done

      # 19. 创建工作流摘要- 核心步骤（便于查看运行结果）
      - name: Create workflow summary
        if: always()
        run: |
          echo "## 工作流运行摘要" >> $GITHUB_STEP_SUMMARY
          echo "- 运行状态: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- 变更提交: ${{ steps.commit.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "## 详细日志" >> $GITHUB_STEP_SUMMARY
          echo "查看完整日志：[View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      # 20. 清理旧工作流- 核心步骤（减少存储占用）
      - name: Cleanup old workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 3

      # 21. 清理旧工件- 核心步骤（减少存储占用）
      - name: Cleanup old artifacts
        uses: c-hive/gha-remove-artifacts@v1.4.0
        with:
          age: '7 days'