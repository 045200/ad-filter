name: Update Multi Rules with SmartDNS
on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */12 * * *'  # 每12小时运行一次
  push:
    branches: [ "multi" ]
    paths:
      - 'data/mod/**'
      - 'data/rules.txt'
permissions:
  contents: write
  actions: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: ${{ github.workspace }}/data
      PYTHON_SCRIPTS: ${{ github.workspace }}/data/python
      MIHOMO_BIN: ${{ github.workspace }}/data/mihomo-tool
      MAIN_BRANCH: multi
      CACHE_DIR: ${{ github.workspace }}/data/cache
      TEMP_DIR: ${{ github.workspace }}/tmp
      SMARTDNS_PORT: 5353
      SMARTDNS_RULE_SOURCES: ${{ github.workspace }}/data/smartdns_sources.txt

    steps:
      # 1. 拉取代码（multi分支）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.MAIN_BRANCH }}

      # 2. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3. 安装系统依赖
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq moreutils dnsutils

      # 4. 直接下载SmartDNS x86_64二进制文件
      - name: Install SmartDNS directly
        run: |
          # 获取最新发布版本信息
          echo "获取SmartDNS最新版本信息..."
          API_URL="https://api.github.com/repos/pymumu/smartdns/releases/latest"
          LATEST_RELEASE=$(curl -sL $API_URL)
          
          # 检查获取的JSON是否有效
          if echo "$LATEST_RELEASE" | jq -e '.message' | grep -q "Not Found"; then
              echo "错误：未找到仓库或发布版本，请确认项目地址"
              exit 1
          fi

          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name // empty')
          if [ -z "$RELEASE_TAG" ]; then
              echo "错误：无法获取发布标签"
              exit 1
          fi
          echo "最新版本: $RELEASE_TAG"

          # 直接查找x86_64架构的二进制文件
          DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | test("smartdns-x86_64$")) | .browser_download_url' | head -n 1)
          
          # 如果找不到直接匹配，尝试查找包含x86_64的文件
          if [ -z "$DOWNLOAD_URL" ]; then
              echo "未找到直接匹配的x86_64二进制文件，尝试查找包含x86_64的文件..."
              DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("x86_64")) | .browser_download_url' | head -n 1)
          fi
          
          if [ -z "$DOWNLOAD_URL" ]; then
              echo "错误：未找到x86_64架构的二进制文件"
              echo "可用资源："
              echo "$LATEST_RELEASE" | jq -r '.assets[].name'
              exit 1
          fi
          
          FILENAME=$(basename "$DOWNLOAD_URL")
          echo "下载链接: $DOWNLOAD_URL"
          echo "文件名: $FILENAME"

          # 下载二进制文件 (使用curl替代wget)
          echo "正在下载SmartDNS二进制文件..."
          if ! curl -L -o "/usr/local/bin/smartdns" --progress-bar "$DOWNLOAD_URL"; then
              echo "下载失败"
              exit 1
          fi

          sudo chmod +x "/usr/local/bin/smartdns"
          
          # 验证安装
          echo "SmartDNS安装完成，版本信息:"
          if /usr/local/bin/smartdns -v; then
              echo "安装成功"
          else
              echo "验证版本失败，但文件已复制"
              # 即使-v失败也不一定代表安装完全失败，可能只是显示方式不同
              echo "尝试直接执行smartdns --version"
              /usr/local/bin/smartdns --version || echo "继续执行流程"
          fi
        timeout-minutes: 5  # 设置步骤超时

      # 5. 安装Python依赖
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install aiohttp aiodns psutil xxhash maxminddb pyyaml requests chardet adblockparser IPy pytz pybloom-live aiofiles

      # 6. 创建必要的目录
      - name: Create directories
        run: |
          mkdir -p ${{ env.DATA_DIR }}/filter
          mkdir -p ${{ env.DATA_DIR }}/mod/backups
          mkdir -p ${{ env.DATA_DIR }}/smartdns
          mkdir -p ${{ env.CACHE_DIR }}
          mkdir -p ${{ env.TEMP_DIR }}
          mkdir -p ${{ env.DATA_DIR }}/sources

      # 7. 检测文件变更
      - name: Detect changed files
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            data/mod/**
            data/rules.txt

      # 8. 运行dl.py（下载规则）
      - name: Run dl.py
        run: |
          cd ${{ github.workspace }}
          python ${{ env.PYTHON_SCRIPTS }}/dl.py

      # 9. 运行SmartDNS规则下载器
      - name: Download SmartDNS rules
        run: |
          cd ${{ github.workspace }}
          python ${{ env.PYTHON_SCRIPTS }}/dl_smartdns.py

      # 10. 运行merge.py（广告规则合并去重）
      - name: Run merge.py
        run: |
          cd ${{ github.workspace }}
          python ${{ env.PYTHON_SCRIPTS }}/merge.py
          echo "广告规则合并完成"

      # 11. 清理临时生成的adblock和allow文件
      - name: Cleanup temporary filter files
        run: |
          cd ${{ env.DATA_DIR }}/filter
          # 删除所有adblock*.txt文件，但保留adblock_filter.txt
          for file in adblock*.txt; do
            if [ "$file" != "adblock_filter.txt" ]; then
              echo "删除临时文件: $file"
              rm -f "$file"
            fi
          done
          # 删除所有allow*.txt文件，但保留allow_filter.txt
          for file in allow*.txt; do
            if [ "$file" != "allow_filter.txt" ]; then
              echo "删除临时文件: $file"
              rm -f "$file"
            fi
          done
          echo "临时文件清理完成"

      # 12. 运行SmartDNS规则清理器
      - name: Run SmartDNS Rule Cleaner
        run: |
          cd ${{ github.workspace }}
          python ${{ env.PYTHON_SCRIPTS }}/filter_cleaner.py
        env:
          MAX_WORKERS: 8
          DNS_WORKERS: 30
          BATCH_SIZE: 500
          MAX_MEMORY_PERCENT: 80
          DNS_TIMEOUT: 8
          DNS_RETRIES: 2
          USE_SMARTDNS: "true"
          PROCESS_SMARTDNS_RULES: "true"

      # 13. 生成多格式规则
      - name: Generate multi-format rules
        run: |
          cd ${{ github.workspace }}
          python ${{ env.PYTHON_SCRIPTS }}/filter_adg.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_adh.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_adp.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_pihole.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_hosts.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_ubo.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_clash.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_mihomo.py
          python ${{ env.PYTHON_SCRIPTS }}/filter_smartdns.py

      # 14. 更新文档
      - name: Update documentation
        run: |
          cd ${{ github.workspace }}
          python ${{ env.PYTHON_SCRIPTS }}/title.py
          python ${{ env.PYTHON_SCRIPTS }}/readme.py

      # 15. 统一清理步骤
      - name: Unified cleanup process
        run: |
          # 清理备份文件（保留每种类型的最新一个）
          BACKUP_DIR="${{ env.DATA_DIR }}/filter/backups"
          if [ -d "$BACKUP_DIR" ]; then
            echo "清理备份文件，保留每种类型的最新一个..."
            
            # 处理每种类型的备份文件
            for type in adblock allow; do
              echo "处理 $type 类型的备份文件..."
              
              # 找到该类型的所有备份文件并按时间排序（最新的在前）
              files=$(find "$BACKUP_DIR" -type f -name "${type}_filter_backup_*.txt" -printf '%T@ %p\n' | sort -nr)
              
              if [ -n "$files" ]; then
                # 计算文件数量
                count=$(echo "$files" | wc -l)
                echo "找到 $count 个 $type 备份文件"
                
                if [ $count -gt 1 ]; then
                  # 保留第一个（最新的），删除其余
                  echo "$files" | tail -n +2 | cut -d' ' -f2- | xargs -r rm -f
                  echo "已删除 $((count-1)) 个旧的 $type 备份文件"
                else
                  echo "只有一个 $type 备份文件，无需删除"
                fi
              else
                echo "未找到 $type 类型的备份文件"
              fi
            done
            
            echo "备份文件清理完成"
          else
            echo "备份目录不存在，跳过清理"
          fi
          
          # 清理临时目录
          echo "清理临时目录..."
          rm -rf ${{ env.TEMP_DIR }}
          echo "临时目录清理完成"

      # 16. 提交变更
      - name: Commit changes
        id: commit
        run: |
          cd ${{ github.workspace }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git add --all
          
          # 确保不添加临时文件
          git reset -- ${{ env.DATA_DIR }}/filter/adblock[0-9]*.txt
          git reset -- ${{ env.DATA_DIR }}/filter/allow[0-9]*.txt
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git commit -m "SmartDNS规则更新: [$(date +'%Y-%m-%d %H:%M:%S') UTC+8]"
          fi

      # 17. 推送变更
      - name: Push changes
        if: steps.commit.outputs.has_changes == 'true'
        run: |
          cd ${{ github.workspace }}
          for i in 1 2 3; do
            git pull --rebase origin ${{ env.MAIN_BRANCH }}
            git push origin ${{ env.MAIN_BRANCH }} && break || sleep 5
          done

      # 18. 清理旧工作流
      - name: Cleanup old workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 3

      # 19. 清理旧工件
      - name: Cleanup old artifacts
        uses: c-hive/gha-remove-artifacts@v1.4.0
        with:
          age: '7 days'