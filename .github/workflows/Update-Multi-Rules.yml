name: Update Multi-Format Rules & Mihomo

# 触发条件：手动触发、每12小时调度、multi分支特定文件变更
on: 
  workflow_dispatch:  # 支持手动触发更新
  schedule:
    - cron: '0 */12 * * *'  # 与基础工作流保持同步调度频率
  push:
    branches: [ "multi" ]  # 仅监听multi分支
    paths:
      - 'data/python/**'   # Python脚本变更触发
      - 'data/mod/**'      # 配置模块变更触发
      - '.github/workflows/multi.yml'  # 工作流自身变更触发

# 权限配置：允许提交代码和管理工作流记录
permissions:
  contents: write
  workflow: write

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: ${{ github.workspace }}/data
      PYTHON_SCRIPTS: ${{ github.workspace }}/data/python
      MIHOMO_BIN: ${{ github.workspace }}/data/mihomo-tool
      MAIN_BRANCH: multi  # 绑定multi分支作为工作分支

    steps:
      # 1. 拉取代码（指定multi分支）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便提交
          ref: ${{ env.MAIN_BRANCH }}  # 明确拉取multi分支

      # 2. 检测文件变更（用于条件执行后续步骤）
      - name: Detect changed files
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            ${{ env.PYTHON_SCRIPTS }}/**
            ${{ env.DATA_DIR }}/mod/**

      # 3. 配置Python环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'  # 启用pip缓存加速依赖安装

      # 4. 安装依赖（系统工具+Python库）
      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq moreutils
          pip install --upgrade pip
          pip install requests aiodns pyyaml beautifulsoup4

      # 5. 更新Mihomo工具（保持与基础工作流同步逻辑）
      - name: Update Mihomo
        id: mihomo
        run: |
          # 获取最新版本号
          LATEST_VERSION=$(curl -sL https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "Latest Mihomo version: $LATEST_VERSION"
          
          # 检查当前版本
          if [ -f "${{ env.MIHOMO_BIN }}" ]; then
            CURRENT_VERSION=$("${{ env.MIHOMO_BIN }}" -v 2>/dev/null | awk '{print $2}' | sed 's/^v//' || echo "0.0.0")
          else
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current Mihomo version: $CURRENT_VERSION"
          
          # 版本不一致则更新
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "Updating Mihomo from v$CURRENT_VERSION to v$LATEST_VERSION"
            mkdir -p "$(dirname "${{ env.MIHOMO_BIN }}")"
            # 下载并解压最新版本
            curl -sL "https://github.com/MetaCubeX/mihomo/releases/latest/download/mihomo-linux-amd64-v${LATEST_VERSION}.gz" | gzip -d > "${{ env.MIHOMO_BIN }}"
            chmod +x "${{ env.MIHOMO_BIN }}"
            echo "mihomo_updated=true" >> "$GITHUB_OUTPUT"
          else
            echo "Mihomo is up-to-date (v$LATEST_VERSION)"
            echo "mihomo_updated=false" >> "$GITHUB_OUTPUT"
          fi
          # 记录当前使用的版本号
          echo "$LATEST_VERSION" > "${{ env.DATA_DIR }}/.mihomo_version"
          echo "LATEST_VERSION=$LATEST_VERSION" >> "$GITHUB_ENV"

      # 6. 处理基础规则（共享逻辑，支持失败继续）
      - name: Process base rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python "${{ env.PYTHON_SCRIPTS }}/dl.py"
          python "${{ env.PYTHON_SCRIPTS }}/merge.py"
        continue-on-error: true  # 允许基础规则处理失败时继续执行

      # 7. 生成多格式规则（multi分支核心功能）
      - name: Generate multi-format rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          # 生成各平台规则
          python "${{ env.PYTHON_SCRIPTS }}/filter_adp.py"   # Adblock Plus格式
          python "${{ env.PYTHON_SCRIPTS }}/filter_ubo.py"   # uBlock Origin格式
          python "${{ env.PYTHON_SCRIPTS }}/filter_adg.py"   # AdGuard格式
          python "${{ env.PYTHON_SCRIPTS }}/filter_adh.py"   # AdGuard Home格式
          python "${{ env.PYTHON_SCRIPTS }}/filter_clash.py" # Clash格式
          python "${{ env.PYTHON_SCRIPTS }}/filter_mihomo.py" # Mihomo扩展格式

      # 8. 更新文档（保持与基础工作流同步）
      - name: Update documentation
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python "${{ env.PYTHON_SCRIPTS }}/title.py"

      # 9. 提交变更（区分Mihomo更新场景）
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git add .
          # 根据Mihomo是否更新生成不同提交信息
          if [ "${{ steps.mihomo.outputs.mihomo_updated }}" = "true" ]; then
            git commit -m "Multi-format update: Rules + Mihomo v${{ env.LATEST_VERSION }} [$(date +'%Y-%m-%d %H:%M:%S') UTC+8]" || echo "No changes to commit"
          else
            git commit -m "Multi-format update: Rules [$(date +'%Y-%m-%d %H:%M:%S') UTC+8]" || echo "No changes to commit"
          fi

      # 10. 推送变更（带冲突处理重试）
      - name: Push changes
        run: |
          # 重试机制处理推送冲突
          for attempt in {1..3}; do
            git pull --rebase origin "${{ env.MAIN_BRANCH }}" && git push origin "${{ env.MAIN_BRANCH }}" && break
            echo "Push attempt $attempt failed, retrying..."
            sleep 5
          done

      # 11. 清理旧工作流记录（保留最近5次）
      - name: Cleanup old workflows
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 5
