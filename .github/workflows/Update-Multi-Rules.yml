name: Update Multi-Format Rules & Mihomo
on: 
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */12 * * *'  # 与basic工作流保持相同调度频率
  push:
    branches: [ "multi" ]  # 仅在multi分支推送时触发
    paths:
      - 'data/python/**'   # 监测python脚本变更
      - 'data/mod/**'      # 监测mod配置变更

permissions:
  contents: write        # 用于代码提交推送
  actions: write         # 用于删除旧工作流记录（新增权限）

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: ${{ github.workspace }}/data
      PYTHON_SCRIPTS: ${{ github.workspace }}/data/python
      MIHOMO_BIN: ${{ github.workspace }}/data/mihomo-tool
      MAIN_BRANCH: multi  # 关联multi分支

    steps:
      # 1. 拉取代码（multi分支）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.MAIN_BRANCH }}

      # 2. 检测文件变更
      - name: Detect changed files
        id: changes
        uses: tj-actions/changed-files@v42
        with:
          files: |
            ${{ env.PYTHON_SCRIPTS }}/**
            ${{ env.DATA_DIR }}/mod/**

      # 3. 设置Python环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 4. 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq moreutils  # 系统工具
          pip install --upgrade pip
          pip install requests aiodns pyyaml beautifulsoup4

      # 5. 更新Mihomo
      - name: Update Mihomo
        id: mihomo
        run: |
          LATEST_VERSION=$(curl -sL https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "Latest version: $LATEST_VERSION"
          
          if [ -f "${{ env.MIHOMO_BIN }}" ]; then
            CURRENT_VERSION=$("${{ env.MIHOMO_BIN }}" -v 2>/dev/null | awk '{print $2}' | sed 's/v//' || echo "0.0.0")
          else
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "Updating Mihomo from v$CURRENT_VERSION to v$LATEST_VERSION"
            mkdir -p $(dirname "${{ env.MIHOMO_BIN }}")
            curl -sL "https://github.com/MetaCubeX/mihomo/releases/latest/download/mihomo-linux-amd64-v${LATEST_VERSION}.gz" | gzip -d > "${{ env.MIHOMO_BIN }}"
            chmod +x "${{ env.MIHOMO_BIN }}"
            echo "mihomo_updated=true" >> $GITHUB_OUTPUT
          else
            echo "Mihomo is up-to-date (v$LATEST_VERSION)"
            echo "mihomo_updated=false" >> $GITHUB_OUTPUT
          fi
          echo "$LATEST_VERSION" > "${{ env.DATA_DIR }}/.mihomo_version"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      # 6. 处理基础规则
      - name: Process base rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ${{ env.PYTHON_SCRIPTS }}/dl.py
          python ${{ env.PYTHON_SCRIPTS }}/merge.py
        continue-on-error: true

      # 7. 生成多格式规则（multi分支特有）
      - name: Generate multi-format rules
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: |
          python ${{ env.PYTHON_SCRIPTS }}/filter_adp.py   # Adblock Plus
          python ${{ env.PYTHON_SCRIPTS }}/filter_ubo.py   # uBlock Origin
          python ${{ env.PYTHON_SCRIPTS }}/filter_adg.py   # AdGuard
          python ${{ env.PYTHON_SCRIPTS }}/filter_adh.py   # AdGuard Home
          python ${{ env.PYTHON_SCRIPTS }}/filter_clash.py # Clash
          python ${{ env.PYTHON_SCRIPTS }}/filter_mihomo.py # Mihomo扩展规则

      # 8. 更新文档
      - name: Update documentation
        if: steps.changes.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch' || github.event_name == 'schedule'
        run: python ${{ env.PYTHON_SCRIPTS }}/title.py

      # 9. 提交变更
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git add --all
          if [ "${{ steps.mihomo.outputs.mihomo_updated }}" = "true" ]; then
            git commit -m "Multi-format update: Rules + Mihomo v${{ env.LATEST_VERSION }} [$(date +'%Y-%m-%d %H:%M:%S') UTC+8]"
          else
            git commit -m "Multi-format update: Rules [$(date +'%Y-%m-%d %H:%M:%S') UTC+8]"
          fi || echo "No changes to commit"

      # 10. 推送变更（带重试机制）
      - name: Push changes
        run: |
          for i in 1 2 3; do
            git pull --rebase origin ${{ env.MAIN_BRANCH }}
            git push origin ${{ env.MAIN_BRANCH }} && break || sleep 5
          done

      # 11. 清理旧工作流（修复版本）
      - name: Cleanup old workflows
        uses: Mattraks/delete-workflow-runs@v2  # 使用固定版本，避免兼容性问题
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 0
          keep_minimum_runs: 5  # 保留最近5次运行记录
